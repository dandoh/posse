//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/shortestPathRouting/ShortestPathRoutingPacket.msg.
//

#ifndef _SHORTESTPATHROUTINGPACKET_M_H_
#define _SHORTESTPATHROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
#include "GeoMathHelper.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/shortestPathRouting/ShortestPathRoutingPacket.msg:11</tt> by nedtool.
 * <pre>
 * enum ShortestPathPacketDef
 * {
 * 
 *     SHORTEST_PATH_DATA_PACKET = 0;       // data packet
 * }
 * </pre>
 */
enum ShortestPathPacketDef {
    SHORTEST_PATH_DATA_PACKET = 0
};

/**
 * Enum generated from <tt>src/node/communication/routing/shortestPathRouting/ShortestPathRoutingPacket.msg:15</tt> by nedtool.
 * <pre>
 * enum RollingBallForwardingMode
 * {
 * 
 *     GREEDY_ROUTING = 0;
 *     ROLLINGBALL_ROUTING = 1;
 * }
 * </pre>
 */
enum RollingBallForwardingMode {
    GREEDY_ROUTING = 0,
    ROLLINGBALL_ROUTING = 1
};

/**
 * Class generated from <tt>src/node/communication/routing/shortestPathRouting/ShortestPathRoutingPacket.msg:20</tt> by nedtool.
 * <pre>
 * packet ShortestPathRoutingPacket extends RoutingPacket
 * {
 *     int packetId;
 *     int previousId;
 *     int ShortestPathPacketKind @enum(ShortestPathPacketDef);
 * 
 *     // normal field
 *     Point destLocation;
 *     Point sourceLocation;
 * 
 *     // for routing point to point
 *     Point ballCenter;
 *     Point stuckLocation;
 *     int routingMode @enum(RollingBallForwardingMode);
 * 
 * 
 *     Point nextStoppingPlace;
 * 
 *     Point startShortestPathLocation;
 * }
 * </pre>
 */
class ShortestPathRoutingPacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    int previousId_var;
    int ShortestPathPacketKind_var;
    Point destLocation_var;
    Point sourceLocation_var;
    Point ballCenter_var;
    Point stuckLocation_var;
    int routingMode_var;
    Point nextStoppingPlace_var;
    Point startShortestPathLocation_var;

  private:
    void copy(const ShortestPathRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ShortestPathRoutingPacket&);

  public:
    ShortestPathRoutingPacket(const char *name=NULL, int kind=0);
    ShortestPathRoutingPacket(const ShortestPathRoutingPacket& other);
    virtual ~ShortestPathRoutingPacket();
    ShortestPathRoutingPacket& operator=(const ShortestPathRoutingPacket& other);
    virtual ShortestPathRoutingPacket *dup() const {return new ShortestPathRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getPreviousId() const;
    virtual void setPreviousId(int previousId);
    virtual int getShortestPathPacketKind() const;
    virtual void setShortestPathPacketKind(int ShortestPathPacketKind);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<ShortestPathRoutingPacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
    virtual Point& getSourceLocation();
    virtual const Point& getSourceLocation() const {return const_cast<ShortestPathRoutingPacket*>(this)->getSourceLocation();}
    virtual void setSourceLocation(const Point& sourceLocation);
    virtual Point& getBallCenter();
    virtual const Point& getBallCenter() const {return const_cast<ShortestPathRoutingPacket*>(this)->getBallCenter();}
    virtual void setBallCenter(const Point& ballCenter);
    virtual Point& getStuckLocation();
    virtual const Point& getStuckLocation() const {return const_cast<ShortestPathRoutingPacket*>(this)->getStuckLocation();}
    virtual void setStuckLocation(const Point& stuckLocation);
    virtual int getRoutingMode() const;
    virtual void setRoutingMode(int routingMode);
    virtual Point& getNextStoppingPlace();
    virtual const Point& getNextStoppingPlace() const {return const_cast<ShortestPathRoutingPacket*>(this)->getNextStoppingPlace();}
    virtual void setNextStoppingPlace(const Point& nextStoppingPlace);
    virtual Point& getStartShortestPathLocation();
    virtual const Point& getStartShortestPathLocation() const {return const_cast<ShortestPathRoutingPacket*>(this)->getStartShortestPathLocation();}
    virtual void setStartShortestPathLocation(const Point& startShortestPathLocation);
};

inline void doPacking(cCommBuffer *b, ShortestPathRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ShortestPathRoutingPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/shortestPathRouting/ShortestPathRoutingPacket.msg:40</tt> by nedtool.
 * <pre>
 * packet ShortestPathDiscoverHolePacket extends RoutingPacket
 * {
 *     int originatorId;
 *     Point ballCenter;
 *     int previousId;
 *     string path;
 * }
 * </pre>
 */
class ShortestPathDiscoverHolePacket : public ::RoutingPacket
{
  protected:
    int originatorId_var;
    Point ballCenter_var;
    int previousId_var;
    opp_string path_var;

  private:
    void copy(const ShortestPathDiscoverHolePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ShortestPathDiscoverHolePacket&);

  public:
    ShortestPathDiscoverHolePacket(const char *name=NULL, int kind=0);
    ShortestPathDiscoverHolePacket(const ShortestPathDiscoverHolePacket& other);
    virtual ~ShortestPathDiscoverHolePacket();
    ShortestPathDiscoverHolePacket& operator=(const ShortestPathDiscoverHolePacket& other);
    virtual ShortestPathDiscoverHolePacket *dup() const {return new ShortestPathDiscoverHolePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getOriginatorId() const;
    virtual void setOriginatorId(int originatorId);
    virtual Point& getBallCenter();
    virtual const Point& getBallCenter() const {return const_cast<ShortestPathDiscoverHolePacket*>(this)->getBallCenter();}
    virtual void setBallCenter(const Point& ballCenter);
    virtual int getPreviousId() const;
    virtual void setPreviousId(int previousId);
    virtual const char * getPath() const;
    virtual void setPath(const char * path);
};

inline void doPacking(cCommBuffer *b, ShortestPathDiscoverHolePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ShortestPathDiscoverHolePacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _SHORTESTPATHROUTINGPACKET_M_H_

