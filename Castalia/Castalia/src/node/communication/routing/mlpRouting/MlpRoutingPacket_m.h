//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/mlpRouting/MlpRoutingPacket.msg.
//

#ifndef _MLPROUTINGPACKET_M_H_
#define _MLPROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
#include "GeoMathHelper.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/mlpRouting/MlpRoutingPacket.msg:11</tt> by nedtool.
 * <pre>
 * enum MlpPacketDef
 * {
 * 
 *     MLP_DATA_PACKET = 0;       // data packet
 * }
 * </pre>
 */
enum MlpPacketDef {
    MLP_DATA_PACKET = 0
};

/**
 * Class generated from <tt>src/node/communication/routing/mlpRouting/MlpRoutingPacket.msg:15</tt> by nedtool.
 * <pre>
 * packet MlpPacket extends RoutingPacket
 * {
 *     int packetId;
 *     int previousId;
 *     int MlpPacketKind @enum(MlpPacketDef);
 * 
 *     // normal field
 *     Point destLocation;
 *     Point sourceLocation;
 * }
 * </pre>
 */
class MlpPacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    int previousId_var;
    int MlpPacketKind_var;
    Point destLocation_var;
    Point sourceLocation_var;

  private:
    void copy(const MlpPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MlpPacket&);

  public:
    MlpPacket(const char *name=NULL, int kind=0);
    MlpPacket(const MlpPacket& other);
    virtual ~MlpPacket();
    MlpPacket& operator=(const MlpPacket& other);
    virtual MlpPacket *dup() const {return new MlpPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getPreviousId() const;
    virtual void setPreviousId(int previousId);
    virtual int getMlpPacketKind() const;
    virtual void setMlpPacketKind(int MlpPacketKind);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<MlpPacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
    virtual Point& getSourceLocation();
    virtual const Point& getSourceLocation() const {return const_cast<MlpPacket*>(this)->getSourceLocation();}
    virtual void setSourceLocation(const Point& sourceLocation);
};

inline void doPacking(cCommBuffer *b, MlpPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MlpPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _MLPROUTINGPACKET_M_H_

